{
	"info": {
		"_postman_id": "7a465be5-cea8-49f8-a804-9601b3391ce1",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20721940"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body\", function () {\r",
							"    pm.expect(pm.response.text()).to.equal(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Стутас код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. спарсить response body в json\r",
							"    var jsonData = pm.response.json();\r",
							"// 4. проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(`Name = ${jsonData.name}`, function () {\r",
							"    pm.expect(jsonData.name).to.equal(\"Vika\");\r",
							"});\r",
							"// 5. проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(`Age = ${jsonData.age}`, function () {\r",
							"    pm.expect(jsonData.age).to.equal(\"25\");\r",
							"});\r",
							"// 6. проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(`Salary = ${jsonData.salary}`, function () {\r",
							"    pm.expect(jsonData.salary).to.equal(500);\r",
							"});\r",
							"// 7. cпарсить request.\r",
							"let req = request.data\r",
							"// console.log(req)\r",
							"// 8. проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"pm.test(\"Name_1\", function () {\r",
							"    pm.expect(jsonData.name).to.equal(req.name)\r",
							"});\r",
							"// 9. проверить, что age в ответе равно age из request (name забрать из request.)\r",
							"pm.test(\"Age_1\", function () {\r",
							"    pm.expect(jsonData.age).to.equal(req.age)\r",
							"});\r",
							"// 10. проверить, что salary в ответе равно salary из request (name забрать из request.)\r",
							"pm.test(\"Salary_1\", function () {\r",
							"    pm.expect(jsonData.salary).to.equal(Number(req.salary))\r",
							"});\r",
							"//  11. вывести в консоль параметр family из response\r",
							"console.log(jsonData.family)\r",
							"// 12. проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var salary_1_5_y = Number(req.salary)*4\r",
							"// console.log(salary_1_5_y)\r",
							"pm.test(\"Salary_1_5_y\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.equal(salary_1_5_y)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vika",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Стутас код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let res = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(`Name res ${res.name} = Name req ${req.name}`, function () {\r",
							"     pm.expect(res.name).to.equal(req.name)\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(`Age res ${res.age} = Age req ${req.age}`, function () {\r",
							"     pm.expect(res.age).to.equal(req.age)\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(`Salary res ${res.salary} = Salary req ${req.salary}`, function () {\r",
							"     pm.expect(+res.salary).to.equal(+req.salary)\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(res.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog's name\", function () {\r",
							"    pm.expect(res.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog's age\", function () {\r",
							"    pm.expect(res.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(`${res.family.pets.dog.name}'s dog?`, function () {\r",
							"    pm.expect(res.family.pets.dog.name).to.include(\"Luky\")\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(`${res.family.pets.dog.age} year old dog?`, function () {\r",
							"    pm.expect(res.family.pets.dog.age).to.eql(4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vika&age=69&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vika"
						},
						{
							"key": "age",
							"value": "69"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let res = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(`Name res ${res.name} = Name req ${req.name}`, function () {\r",
							"    pm.expect(res.name).to.eql(req.name)\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(`Age res ${res.age} = Age req ${req.age}`, function () {\r",
							"    pm.expect(+res.age).to.eql(+req.age)\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(res.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(res.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(res.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(res.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(`Salary[0] in response ${res.salary[0]} = Salary in request ${req.salary}`, function () {\r",
							"    pm.expect(+res.salary[0]).to.equal(+req.salary)\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(`Salary[1] in response ${res.salary[1]} = Salary*2 in request ${req.salary*2}`, function () {\r",
							"    pm.expect(+res.salary[1]).to.eql((+req.salary)*2)\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(`Salary[3] in response ${res.salary[2]} = Salary*3 in request ${req.salary*3}`, function () {\r",
							"    pm.expect(+res.salary[2]).to.eql((+req.salary)*3)\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i=0; i<res.salary.length; i++) {\r",
							"    console.log(`Salary for ${i+1} month - ${res.salary[i]}`);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}